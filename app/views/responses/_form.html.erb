<%= form_for([@challenge, @response]) do |f| %>
  <% if @challenge.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(@challenge.errors.count, "error") %> prohibited this prompt from being saved:</h2>

      <ul>
      <% @challenge.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>
  <div class="response-field">
    <%= f.text_area :response, :placeholder => "Start writing here...", :autofocus => true %>
  </div>
  <br />
  <div class="actions hidden">
    <%= button_tag(type: 'submit', class: "ladda-button", 'data-style' => "zoom-out", :style=> "font-family: 'Montserrat', Arial, Helvetica, sans-serif;
        border-radius: 10px;
        width: 300px;
        border: #fbfbfb solid 4px;
        cursor:pointer;
        background-color: #3498db;
        color:white;
        font-size:24px;
        padding-top:8px;
        padding-bottom:8px;
        -webkit-transition: all 0.3s;
        -moz-transition: all 0.3s;
        transition: all 0.3s;
          margin-top:-4px;
          font-weight:100;") do %>
        <span class="ladda-label">Complete</span>
    <% end %>
    <div class="ease"></div>
  </div>

<% end %>

<div class="bottom-banner-container">
    <div class="bottom-banner">
      <%= link_to "Learn more about the project" %>
    </div>
</div>
<p id="copyright">Â© WritersMob, 2014</p>
<%=javascript_include_tag "parsley.js", "parsley.remote.js", "jstz-1.0.4.min.js", "ladda.min.js", "spin.min.js" %> 
<script>

  
  $(document).ready(function(e) { 
    Ladda.bind( '.ladda-button');
    $('#response_response').each(function() {
        var input = '#' + this.id;
        var count = input + '_count';
        $(count).show();
        word_count(input, count);
        $(this).keyup(function() { 
          word_count(input, count) 
        });
    });
    var $countdown_timer = $("#countdown_timer");

    function update() {
        var myTime = $countdown_timer.html();
        
        var ss = myTime.split(":");
        var dt = new Date();
        dt.setHours(0);
        dt.setMinutes(ss[0]);
        dt.setSeconds(ss[1]);
        
        var dt2 = new Date(dt.valueOf() + 1000);
        var temp = dt2.toTimeString().split(" ");
        var ts = temp[0].split(":");
        var number = $("#response_response_count").html().match(/^[0-9]+/);
        $countdown_timer.html(ts[1]+":"+ts[2]);
        setTimeout(update, 1000);
    }

    setTimeout(update, 1000);

  });

  function word_count(field, count) {
      var number = 0;
      var matches = $(field).val().match(/\S+/g);
      if (matches) {
        number = matches.length;
      } else { 
        number = 0;
      }
      if (number > 2) {
        $(".actions").removeClass("hidden");
        $(".actions").addClass('shown');
      } else { 
        $(".actions").removeClass("shown");
        $(".actions").addClass('hidden');
      }
      $(count).text( number + ' word' + (number != 1 ? 's' : '') + ' written so far');
  };

  
  // function countdown( elementName, minutes, seconds ) {
  //     var element, endTime, hours, mins, msLeft, time;

  //     function twoDigits( n )
  //     {
  //         return (n <= 9 ? "0" + n : n);
  //     }

  //     function updateTimer()
  //     {
  //         msLeft = endTime - (+new Date);
  //         if ( msLeft < 1000 ) {
  //             element.innerHTML = "Time is up! You can continue writing or click the complete button.";
  //         } else {
  //             time = new Date( msLeft );
  //             hours = time.getUTCHours();
  //             mins = time.getUTCMinutes();
  //             element.innerHTML = "Time elapsed: " + (hours ? hours + ':' + twoDigits( mins ) : mins) + ':' + twoDigits( time.getUTCSeconds() );
  //             setTimeout( updateTimer, time.getUTCMilliseconds() + 500 );
  //         }
  //     }

  //     element = document.getElementById( elementName );
  //     endTime = (+new Date) + 1000 * (60*minutes + seconds) + 500;
  //     updateTimer();
  // }

  // countdown( "countdown_timer", 5, 0 );
</script>